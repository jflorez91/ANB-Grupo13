version: '3.8'

services:
  # Nginx - Proxy Reverso
  nginx:
    image: nginx:1.25-alpine
    container_name: anb-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./storage:/storage:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - api
    networks:
      - anb-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis - Message Broker
  redis:
    image: redis:7-alpine
    container_name: anb-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - anb-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Celery Worker
  celery_worker:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: anb-celery-worker
    restart: unless-stopped
    command: celery -A app.workers.celery_app:celery_app worker --loglevel=info --concurrency=2 --queues=video_processing,maintenance,rankings --hostname=worker@%h
    environment:
      - DATABASE_URL=mysql+aiomysql://ANBAdmin:ANB12345@mysql-db:3306/anb_rising_stars
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
    volumes:
      - ./storage:/storage
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      mysql-db:
        condition: service_healthy
    networks:
      - anb-network
    healthcheck:
      test: ["CMD", "celery", "-A", "app.workers.celery_app:celery_app", "inspect", "ping", "-d", "worker@%h"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat
  celery_beat:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: anb-celery-beat
    restart: unless-stopped
    command: celery -A app.workers.celery_app:celery_app beat --loglevel=info --schedule=/tmp/celerybeat-schedule
    environment:
      - DATABASE_URL=mysql+aiomysql://ANBAdmin:ANB12345@mysql-db:3306/anb_rising_stars
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
    volumes:
      - ./storage:/storage
      - ./logs:/app/logs
      - celery_beat_data:/tmp
    depends_on:
      redis:
        condition: service_healthy
      mysql-db:
        condition: service_healthy
    networks:
      - anb-network

  # API FastAPI
  api:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: anb-api
    restart: unless-stopped
    expose:
      - "8000"
    environment:
      - DATABASE_URL=mysql+aiomysql://ANBAdmin:ANB12345@mysql-db:3306/anb_rising_stars
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./storage:/storage
      - ./logs:/app/logs
    depends_on:
      mysql-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "python scripts/wait_for_db.py &&
             uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers 2"
    networks:
      - anb-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL Database
  mysql-db:
    image: mysql:8.0
    container_name: anb-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: anb_rising_stars
      MYSQL_USER: ANBAdmin
      MYSQL_PASSWORD: ANB12345
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
    command: 
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --innodb_buffer_pool_size=256M
    networks:
      - anb-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uANBAdmin", "-pANB12345"]
      timeout: 20s
      retries: 10

  # Locust - Pruebas de Carga
  locust:
    build:
      context: ..
      dockerfile: aplication/Dockerfile.locust
    container_name: anb-locust
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "8089:8089"
    networks:
      - anb-network

# Volúmenes
  # SonarQube - Servidor de análisis
  sonarqube:
    image: sonarqube:community
    container_name: anb-sonarqube
    restart: unless-stopped
    ports:
      - "9000:9000"
    environment:
      # Desactiva chequeos de producción para entorno local
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - anb-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000"]
      interval: 30s
      timeout: 10s
      retries: 10

  # Tests + Análisis Sonar (usa tu misma imagen de la API para tener dependencias)
  tests:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: anb-tests
    depends_on:
      sonarqube:
        condition: service_healthy
    environment:
      - SONAR_HOST_URL=http://sonarqube:9000
      - SONAR_TOKEN=${SONAR_TOKEN}
      # Variables opcionales si tus tests requieren servicios
      - DATABASE_URL=mysql+aiomysql://ANBAdmin:ANB12345@mysql-db:3306/anb_rising_stars
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
    working_dir: /app
    volumes:
      - ./:/app
      - ./logs:/app/logs
    command: ["/app/run_tests_and_sonar.sh"]
    networks:
      - anb-network

  # SonarScanner CLI (opcional) para ejecutar análisis desde un contenedor
  sonar-scanner:
    image: sonarsource/sonar-scanner-cli:latest
    container_name: anb-sonar-scanner
    depends_on:
      sonarqube:
        condition: service_healthy
    working_dir: /usr/src
    volumes:
      - ./:/usr/src
    environment:
      - SONAR_HOST_URL=http://sonarqube:9000
      # Pasa el token por variable o docker compose override
      # - SONAR_LOGIN=YOUR_TOKEN
    entrypoint: ["tail", "-f", "/dev/null"]
    networks:
      - anb-network

volumes:
  mysql_data:
  redis_data:
  celery_beat_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:

# Red compartida
networks:
  anb-network:
    driver: bridge
